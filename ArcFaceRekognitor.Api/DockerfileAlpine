FROM mcr.microsoft.com/dotnet/aspnet:7.0-alpine AS base
WORKDIR /app
EXPOSE 8080
EXPOSE 443

FROM mcr.microsoft.com/dotnet/sdk:7.0-alpine  AS build  
WORKDIR /src
COPY ["ArcFaceRekognitor.Api/ArcFaceRekognitor.Api.csproj", "ArcFaceRekognitor.Api/"]
COPY . .
RUN dotnet restore "ArcFaceRekognitor.Api/ArcFaceRekognitor.Api.csproj" -r alpine.3.17-x64
RUN apk update \
    && apk --no-cache add libc6-compat \
    && apk --no-cache add protobuf \
    && apk --no-cache add gcompat \ 
    && apk --no-cache add grpc-plugins \
    && cd /root/.nuget/packages/grpc.tools/2.51.0/tools/linux_x64/ \
    && rm protoc \
    && ln -s /usr/bin/protoc protoc \
    && chmod +x grpc_csharp_plugin

ENV PROTOBUF_PROTOC=/usr/bin/protoc
ENV GRPC_PROTOC_PLUGIN=/usr/bin/grpc_csharp_plugin

WORKDIR /

RUN dotnet build "/src/ArcFaceRekognitor.Api/ArcFaceRekognitor.Api.csproj" -c Release -o /app/build  -r alpine.3.17-x64 --self-contained false

FROM build AS publish
RUN dotnet publish "/src/ArcFaceRekognitor.Api/ArcFaceRekognitor.Api.csproj" -c Release -o /app/publish /p:UseAppHost=false  -r alpine.3.17-x64 --self-contained false --no-restore

FROM base AS finalWithOpenCV

ENV DEBIAN_FRONTEND=noninteractive
ENV OPENCV_VERSION=4.7.0

WORKDIR /

# Add Edge repos
RUN echo -e "\n\
@edgemain http://nl.alpinelinux.org/alpine/edge/main\n\
@edgecomm http://nl.alpinelinux.org/alpine/edge/community\n\
@edgetest http://nl.alpinelinux.org/alpine/edge/testing"\
  >> /etc/apk/repositories

# Install required packages
RUN apk update && apk upgrade && apk --no-cache add \
  bash \
  build-base \  
  gcompat \
  musl-utils \
  ca-certificates \
  clang-dev \
  clang \
  cmake \
  coreutils \
  curl \ 
  freetype-dev \
  ffmpeg-dev \
  ffmpeg-libs \
  gcc \
  g++ \
  git \
  gettext \
  gtk+3.0 \
  gtk+2.0-dev \
  glib-dev \  
  lcms2-dev \
  libavc1394-dev \
  libc-dev \
  libffi-dev \
  libjpeg-turbo-dev \
  libpng \
  libpng-dev \
  libressl-dev \
  libtbb@edgetest \
  libtbb-dev@edgetest \
  libwebp-dev \
  linux-headers \
  libdc1394 \
  eigen \
  eigen-dev \
  harfbuzz \
  make \
  libprotobuf \
  musl \
  ccache \
  python3-dev \  
  py3-pip \
  gflags \
  glog \  
  openblas@edgecomm \
  openblas-dev@edgecomm \
  openjpeg-dev \
  openssl \
  tiff-dev \
  libstdc++ \
  unzip \
  zlib-dev \
  tesseract-ocr-dev 

# Python 3 as default
RUN ln -s /usr/bin/python3 /usr/local/bin/python && \
  ln -s /usr/bin/pip3 /usr/local/bin/pip && \
  pip install --upgrade pip

# Install NumPy
RUN ln -s /usr/include/locale.h /usr/include/xlocale.h && \
  pip install numpy

# Setup opencv and opencv-contrib source
RUN wget -q https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    unzip -q ${OPENCV_VERSION}.zip && \
    rm ${OPENCV_VERSION}.zip && \
    mv opencv-${OPENCV_VERSION} opencv && \
    wget -q https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \
    unzip -q ${OPENCV_VERSION}.zip && \
    rm ${OPENCV_VERSION}.zip && \
    mv opencv_contrib-${OPENCV_VERSION} opencv_contrib

# Build OpenCV
RUN cd opencv && mkdir build && cd build && \
    cmake \
    -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules \
    -D CMAKE_BUILD_TYPE=RELEASE \
    -D BUILD_SHARED_LIBS=OFF \
    -D ENABLE_CXX11=ON \
    -D BUILD_EXAMPLES=OFF \
    -D BUILD_DOCS=OFF \
    -D BUILD_PERF_TESTS=OFF \
    -D BUILD_TESTS=OFF \
    -D BUILD_JAVA=OFF \
    -D BUILD_opencv_app=OFF \
    -D BUILD_opencv_barcode=OFF \
    -D BUILD_opencv_java_bindings_generator=OFF \
    -D BUILD_opencv_js_bindings_generator=OFF \
    -D BUILD_opencv_python_bindings_generator=OFF \
    -D BUILD_opencv_python_tests=OFF \
    -D BUILD_opencv_ts=OFF \
    -D BUILD_opencv_js=OFF \
    -D BUILD_opencv_bioinspired=OFF \
    -D BUILD_opencv_ccalib=OFF \
    -D BUILD_opencv_datasets=OFF \
    -D BUILD_opencv_dnn_objdetect=OFF \
    -D BUILD_opencv_dpm=OFF \
    -D BUILD_opencv_fuzzy=OFF \
    -D BUILD_opencv_gapi=OFF \
    -D BUILD_opencv_intensity_transform=OFF \
    -D BUILD_opencv_mcc=OFF \
    -D BUILD_opencv_objc_bindings_generator=OFF \
    -D BUILD_opencv_rapid=OFF \
    -D BUILD_opencv_reg=OFF \
    -D BUILD_opencv_stereo=OFF \
    -D BUILD_opencv_structured_light=OFF \
    -D BUILD_opencv_surface_matching=OFF \
    -D BUILD_opencv_videostab=OFF \
    -D BUILD_opencv_wechat_qrcode=ON \
    -D WITH_GSTREAMER=OFF \
    -D WITH_ADE=OFF \
    -D OPENCV_ENABLE_NONFREE=ON \
    .. && make -j$(nproc) && make install && ldconfig

WORKDIR /

# Download OpenCvSharp
RUN git clone https://github.com/shimat/opencvsharp.git
RUN cd opencvsharp && git fetch --all --tags --prune

# Install the Extern lib.
WORKDIR /opencvsharp/src
RUN mkdir /opencvsharp/make
RUN cd /opencvsharp/make && cmake /opencvsharp/src && make -j$(nproc) && make install

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/share/opencv4/lib/:/usr/local/lib/:/lib/x86_64-linux-gnu/"

FROM base AS final

WORKDIR /app
COPY --from=publish /app/publish .
COPY --from=finalWithOpenCV /usr/lib /usr/lib
COPY ["ArcFaceRekognitor.Api/BuffaloModel/w600k_r50.onnx", "BuffaloModel/"]
COPY ["ArcFaceRekognitor.Api/OriginalModel/scrfd_10g_bnkps_shape640x640OnnxV6.onnx", "OriginalModel/"]
ENTRYPOINT [ "./ArcFaceRekognitor.Api"]